//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/tp-character-controller/Runtime/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace DaftAppleGames.TpCharacterController.PlayerController
{
    public partial class @PlayerControls: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Character Controls"",
            ""id"": ""86589a5f-820c-47cc-ad99-b5e8885bd736"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""3519862e-8f92-479a-b0b4-51c01bea127c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""38cff307-1315-4e5f-baa0-78277156d9f4"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Crouch"",
                    ""type"": ""Button"",
                    ""id"": ""a3caa000-957c-4267-b0ed-42b4824c1fbb"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""bb74cef0-abe2-4177-a71e-87ec86011665"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Roll"",
                    ""type"": ""Button"",
                    ""id"": ""99faa88a-45e1-4d99-a339-6a68292a8ac3"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""5ad52311-2a74-448c-b5f0-de35d4d28de8"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveGamepad"",
                    ""type"": ""Value"",
                    ""id"": ""dbe463f5-ebb3-4d7f-b859-6029db4123cd"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""41c99324-63a5-4d14-87c5-554a165eb8e3"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""97b8747e-2e5e-4dc5-b2f3-744daa12a268"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard And Mouse;Keyboard and Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""fd385ced-30e0-4aaf-a28f-1897b441cd22"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard And Mouse;Keyboard and Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""af398161-edb9-42a0-aa23-f162ae88ab0f"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard And Mouse;Keyboard and Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""4a7e957a-d97c-4b0e-b0cf-96b78e3c2d11"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard And Mouse;Keyboard and Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""4cff388a-8494-48c3-b79b-61eac841e834"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard And Mouse;Keyboard and Mouse"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fdf3fc0a-501f-4b8d-8a9c-8126ac768083"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard And Mouse;Keyboard and Mouse"",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c0b985d7-3467-4a3a-bc68-1c1ca24f4f7e"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard And Mouse;Keyboard and Mouse"",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6101e521-7554-4e9f-8bb4-bf8885559eef"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2aaa1e2c-9681-4b5c-95df-31a99cbc5133"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard And Mouse;Keyboard and Mouse"",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b989820a-9837-4a86-b288-5d1a61be6f53"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5dcbf562-d37b-4713-a57e-9966474261cd"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard And Mouse;Keyboard and Mouse"",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c12539ce-8808-495f-9de3-f62ce70b127a"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""470eea7a-a39e-4735-be09-1611a50321cc"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard and Mouse"",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fc03d463-b40f-4ca6-8dc7-0fa37c5c2088"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard And Mouse;Keyboard and Mouse"",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""024dbbd7-be95-481d-9be1-11ac5ba9bc28"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dee47e77-80c4-4aa4-81ed-078e04946ccb"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1e3cfb3d-1d55-4ac8-b46e-b90e42bdd91c"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""MoveGamepad"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Camera Controls"",
            ""id"": ""ec15738e-8712-443d-a4d0-6e4235b69d8f"",
            ""actions"": [
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""70b6e270-e0d7-4f7f-af62-102157901723"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LookGamepad"",
                    ""type"": ""Value"",
                    ""id"": ""34ccf5d9-707f-47ec-ab41-801590453556"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Zoom"",
                    ""type"": ""Button"",
                    ""id"": ""eec65edb-cdaa-462c-acc5-8f51e4af06a9"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3eebabb5-91a6-46d0-b19b-a27f2750abca"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""D-Pad"",
                    ""id"": ""46b942a2-50fa-4869-9f9a-dcb7d6abcdc2"",
                    ""path"": ""2DVector"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""6c4029a7-c6a1-4b37-8a73-2cff09e19faf"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""3cc377a9-98df-4f02-b74a-a38521e6039f"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""20bb6a7f-4b3e-4718-9ead-516f302fe897"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard and Mouse"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3eb2ef69-94a4-498c-b70a-8915ed17060e"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""LookGamepad"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""3574b360-2167-409c-97e6-0f2cb6b65b21"",
            ""actions"": [
                {
                    ""name"": ""Navigate"",
                    ""type"": ""PassThrough"",
                    ""id"": ""4810fd45-4f16-4a4b-aae3-78c55039d68b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Submit"",
                    ""type"": ""Button"",
                    ""id"": ""96dda4b2-100d-497b-86a1-878eae67a4ae"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""feb2620f-a405-4f4a-b6d8-922ca16c73d7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Point"",
                    ""type"": ""PassThrough"",
                    ""id"": ""5e32bee5-0dce-410e-8830-ce5dd100a8b1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Click"",
                    ""type"": ""PassThrough"",
                    ""id"": ""4305a7ed-80ad-40a8-a791-f90c4dd27c4e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ScrollWheel"",
                    ""type"": ""PassThrough"",
                    ""id"": ""e5b73881-28be-4a2f-8000-2b841e2df66e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MiddleClick"",
                    ""type"": ""PassThrough"",
                    ""id"": ""0bf507a2-f3fc-427f-b5f6-c1905608b2b7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightClick"",
                    ""type"": ""PassThrough"",
                    ""id"": ""f47c3c06-5a6e-4c49-b37e-622c506338ff"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TrackedDevicePosition"",
                    ""type"": ""PassThrough"",
                    ""id"": ""bfc8483d-acda-4320-b0fa-485ce6bc5b05"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TrackedDeviceOrientation"",
                    ""type"": ""PassThrough"",
                    ""id"": ""e2a5eb34-9900-4b0b-ac7e-bd3c064b2a2d"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Gamepad"",
                    ""id"": ""250d069c-92e4-4ea1-be4e-077711618a5a"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""a104584f-780e-4277-bdf4-0d451b4b5e4b"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""up"",
                    ""id"": ""6a95481b-7a43-4827-8947-d732219368c4"",
                    ""path"": ""<Gamepad>/rightStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""5ed9aef2-488c-49d7-a964-027cf756cffa"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""9f246f5c-9e03-413e-a2d5-1bc3f463a76c"",
                    ""path"": ""<Gamepad>/rightStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""f5465c3c-3bd8-4bdc-a7cf-d273e1974f44"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""99e388fc-edc1-49ad-8208-759a4a2aebec"",
                    ""path"": ""<Gamepad>/rightStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""043ecf64-9f11-4ca0-b5c2-b5aeaf685797"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""fcf5db4a-265f-42ac-8bc5-d2079b84252b"",
                    ""path"": ""<Gamepad>/rightStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""d094e230-3cff-4bb7-8ccf-498e928ffc3e"",
                    ""path"": ""<Gamepad>/dpad"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Joystick"",
                    ""id"": ""0e7e30d8-093a-4dde-b029-b54e865c54a7"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""e8bd2c5e-a960-4b2e-b25c-5afe33639a1b"",
                    ""path"": ""<Joystick>/stick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Joystick;Gamepad"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""08c0983e-0bcb-4ca0-a16b-a1b3527e7000"",
                    ""path"": ""<Joystick>/stick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Joystick;Gamepad"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""feeaa6df-b910-4050-818a-367901ea5e46"",
                    ""path"": ""<Joystick>/stick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Joystick;Gamepad"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b070b311-e30e-497b-9b9a-8b92b1baf80e"",
                    ""path"": ""<Joystick>/stick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Joystick;Gamepad"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""7939242d-6e79-48da-9de7-4d3ae8a3138a"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""6b094ab8-7a15-44fe-b636-f3a35a325820"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse;Keyboard and Mouse"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ba24a0f6-157f-4841-a640-5954e36ea75e"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse;Keyboard and Mouse"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""7e0d2ff9-4595-4a92-bcae-bc090add0b15"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse;Keyboard and Mouse"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""46977eb6-79f4-4582-8bf6-e42ca44e5326"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse;Keyboard and Mouse"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""cdea0403-8a1a-4457-be6c-48b8d226b17f"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse;Keyboard and Mouse"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""448b1431-fae2-407b-9bc5-2fb682f9e870"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse;Keyboard and Mouse"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""c726b116-b108-45f1-80b5-5d729b7ebce2"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse;Keyboard and Mouse"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""5bf83214-7d56-4e22-abb1-00b22d302f3d"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse;Keyboard and Mouse"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""29c1b1c1-bc19-42f3-9700-083ab2814cec"",
                    ""path"": ""*/{Submit}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse;Gamepad;Touch;Joystick;XR;Keyboard and Mouse"",
                    ""action"": ""Submit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cd5152f2-7f1b-4901-8816-de9aef92edae"",
                    ""path"": ""*/{Cancel}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse;Gamepad;Touch;Joystick;XR;Keyboard and Mouse"",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9255ea97-d4a4-4ffb-a098-5ad90fa4845b"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse;Keyboard and Mouse"",
                    ""action"": ""Point"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""868677eb-71d0-4cdc-b62a-5f4ddb6a40df"",
                    ""path"": ""<Pen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse;Keyboard and Mouse"",
                    ""action"": ""Point"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4fecbb2e-b6db-44ae-8d60-9d7ee847050c"",
                    ""path"": ""<Touchscreen>/touch*/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touch;Keyboard and Mouse"",
                    ""action"": ""Point"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d8ee4f4e-9c58-446a-aa1a-977ec164afb7"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse;Keyboard and Mouse"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""63da0a4d-6df7-489d-bb0a-d7f8c6711ac2"",
                    ""path"": ""<Pen>/tip"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse;Keyboard and Mouse"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e606cfcf-d4b9-48a5-90a8-8447823fdaf1"",
                    ""path"": ""<Touchscreen>/touch*/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touch;Keyboard and Mouse"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""90a2945f-b68b-4cd6-9be8-abab175c08c1"",
                    ""path"": ""<XRController>/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR;Keyboard and Mouse"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fbc1d336-9a81-409c-aed9-512991f672ec"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse;Keyboard and Mouse"",
                    ""action"": ""ScrollWheel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""45106c00-665d-4646-b394-d8ee2fd42a70"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse;Keyboard and Mouse"",
                    ""action"": ""MiddleClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8546c933-9014-498a-9cf1-be2cc60ec53c"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse;Keyboard and Mouse"",
                    ""action"": ""RightClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""81ec454d-fde2-4183-9324-de02c864e52f"",
                    ""path"": ""<XRController>/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR;Keyboard and Mouse"",
                    ""action"": ""TrackedDevicePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fc8219ee-94ca-46b6-bd08-073b0f579e1d"",
                    ""path"": ""<XRController>/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR;Keyboard and Mouse"",
                    ""action"": ""TrackedDeviceOrientation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""System Controls"",
            ""id"": ""7490741c-6973-428a-98d6-d458101b9014"",
            ""actions"": [
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""9594fe38-4b14-4492-b5fb-cfd233b9165d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9f232b37-d74e-4d53-bb63-5d6f76035c57"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard and Mouse;Gamepad"",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fa6e2a66-1965-4cbb-b57f-ccf952384d67"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard and Mouse"",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ca0f576f-876c-4f4d-bef9-1f831214707e"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Debug Controls"",
            ""id"": ""01da7cad-f909-4e8a-9946-e66ccab41794"",
            ""actions"": [
                {
                    ""name"": ""ToggleGPUI"",
                    ""type"": ""Button"",
                    ""id"": ""98c7d434-0b18-4602-a6cc-78575087ea0f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3b207364-e171-4e6d-ad7a-735ddb4146bb"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad;Keyboard and Mouse"",
                    ""action"": ""ToggleGPUI"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Fly Cam Controls"",
            ""id"": ""6a5017ee-e64b-488b-9899-58045839155e"",
            ""actions"": [
                {
                    ""name"": ""FlyForward"",
                    ""type"": ""Button"",
                    ""id"": ""194228cd-8828-4c54-901a-10759d30f0fe"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FlyBackward"",
                    ""type"": ""Button"",
                    ""id"": ""b8ac533d-353f-47a9-9708-5dc968edce33"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FlyLeft"",
                    ""type"": ""Button"",
                    ""id"": ""d17b6fd8-bcb9-45c4-a5a2-97547a77b19a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FlyRight"",
                    ""type"": ""Button"",
                    ""id"": ""3a734f3a-cb8f-493b-a6e5-fa42d8f724ae"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FlyUp"",
                    ""type"": ""Button"",
                    ""id"": ""d270a362-7ffd-4d88-9c7e-9cb662b36948"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FlyDown"",
                    ""type"": ""Button"",
                    ""id"": ""349566de-e902-4082-a91c-863358f5f529"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FlyToggleFocus"",
                    ""type"": ""Button"",
                    ""id"": ""17c74ff5-e3ac-493b-be1f-f136a87ab560"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FlySpeedUp"",
                    ""type"": ""Button"",
                    ""id"": ""88c3ce09-9751-45be-91b5-fa2c02e65fb6"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FlyLook"",
                    ""type"": ""Value"",
                    ""id"": ""ecff1f80-76d3-4939-b9e6-2ad35bd99ec6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""FlyLookEnabled"",
                    ""type"": ""Button"",
                    ""id"": ""abda10f3-36b3-49e7-9149-a22ed15dce1d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""dcf0d25d-0f30-4dc5-9dcb-7f9d2d02e6bf"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard and Mouse;Gamepad"",
                    ""action"": ""FlyForward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1154fdd9-e645-42da-b3c1-41d29f756b5c"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard and Mouse;Gamepad"",
                    ""action"": ""FlyBackward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c7b670d5-5a7b-460a-9570-bced3fc93108"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard and Mouse;Gamepad"",
                    ""action"": ""FlyLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""aec08497-528a-4f8e-93d1-5d2c64fecf3e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard and Mouse;Gamepad"",
                    ""action"": ""FlyRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""69963fb4-1b31-4b67-86d0-30c035f2c433"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard and Mouse;Gamepad"",
                    ""action"": ""FlyUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d4c91f17-be24-4f17-8a06-5b1f1d1c1166"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard and Mouse;Gamepad"",
                    ""action"": ""FlyDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1ce1e20f-d0b3-4118-9257-021a258ee199"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad;Keyboard and Mouse"",
                    ""action"": ""FlyToggleFocus"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""58c9c645-9498-43f0-85ce-1c1c693eea1c"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad;Keyboard and Mouse"",
                    ""action"": ""FlySpeedUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f382c00d-6f7e-46d9-94eb-f409893fbc19"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard and Mouse;Gamepad"",
                    ""action"": ""FlyLook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7c3bfe75-7fc7-4725-a64e-924cf5761944"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard and Mouse;Gamepad"",
                    ""action"": ""FlyLookEnabled"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard and Mouse"",
            ""bindingGroup"": ""Keyboard and Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // Character Controls
            m_CharacterControls = asset.FindActionMap("Character Controls", throwIfNotFound: true);
            m_CharacterControls_Move = m_CharacterControls.FindAction("Move", throwIfNotFound: true);
            m_CharacterControls_Jump = m_CharacterControls.FindAction("Jump", throwIfNotFound: true);
            m_CharacterControls_Crouch = m_CharacterControls.FindAction("Crouch", throwIfNotFound: true);
            m_CharacterControls_Sprint = m_CharacterControls.FindAction("Sprint", throwIfNotFound: true);
            m_CharacterControls_Roll = m_CharacterControls.FindAction("Roll", throwIfNotFound: true);
            m_CharacterControls_Attack = m_CharacterControls.FindAction("Attack", throwIfNotFound: true);
            m_CharacterControls_MoveGamepad = m_CharacterControls.FindAction("MoveGamepad", throwIfNotFound: true);
            // Camera Controls
            m_CameraControls = asset.FindActionMap("Camera Controls", throwIfNotFound: true);
            m_CameraControls_Look = m_CameraControls.FindAction("Look", throwIfNotFound: true);
            m_CameraControls_LookGamepad = m_CameraControls.FindAction("LookGamepad", throwIfNotFound: true);
            m_CameraControls_Zoom = m_CameraControls.FindAction("Zoom", throwIfNotFound: true);
            // UI
            m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
            m_UI_Navigate = m_UI.FindAction("Navigate", throwIfNotFound: true);
            m_UI_Submit = m_UI.FindAction("Submit", throwIfNotFound: true);
            m_UI_Cancel = m_UI.FindAction("Cancel", throwIfNotFound: true);
            m_UI_Point = m_UI.FindAction("Point", throwIfNotFound: true);
            m_UI_Click = m_UI.FindAction("Click", throwIfNotFound: true);
            m_UI_ScrollWheel = m_UI.FindAction("ScrollWheel", throwIfNotFound: true);
            m_UI_MiddleClick = m_UI.FindAction("MiddleClick", throwIfNotFound: true);
            m_UI_RightClick = m_UI.FindAction("RightClick", throwIfNotFound: true);
            m_UI_TrackedDevicePosition = m_UI.FindAction("TrackedDevicePosition", throwIfNotFound: true);
            m_UI_TrackedDeviceOrientation = m_UI.FindAction("TrackedDeviceOrientation", throwIfNotFound: true);
            // System Controls
            m_SystemControls = asset.FindActionMap("System Controls", throwIfNotFound: true);
            m_SystemControls_Pause = m_SystemControls.FindAction("Pause", throwIfNotFound: true);
            // Debug Controls
            m_DebugControls = asset.FindActionMap("Debug Controls", throwIfNotFound: true);
            m_DebugControls_ToggleGPUI = m_DebugControls.FindAction("ToggleGPUI", throwIfNotFound: true);
            // Fly Cam Controls
            m_FlyCamControls = asset.FindActionMap("Fly Cam Controls", throwIfNotFound: true);
            m_FlyCamControls_FlyForward = m_FlyCamControls.FindAction("FlyForward", throwIfNotFound: true);
            m_FlyCamControls_FlyBackward = m_FlyCamControls.FindAction("FlyBackward", throwIfNotFound: true);
            m_FlyCamControls_FlyLeft = m_FlyCamControls.FindAction("FlyLeft", throwIfNotFound: true);
            m_FlyCamControls_FlyRight = m_FlyCamControls.FindAction("FlyRight", throwIfNotFound: true);
            m_FlyCamControls_FlyUp = m_FlyCamControls.FindAction("FlyUp", throwIfNotFound: true);
            m_FlyCamControls_FlyDown = m_FlyCamControls.FindAction("FlyDown", throwIfNotFound: true);
            m_FlyCamControls_FlyToggleFocus = m_FlyCamControls.FindAction("FlyToggleFocus", throwIfNotFound: true);
            m_FlyCamControls_FlySpeedUp = m_FlyCamControls.FindAction("FlySpeedUp", throwIfNotFound: true);
            m_FlyCamControls_FlyLook = m_FlyCamControls.FindAction("FlyLook", throwIfNotFound: true);
            m_FlyCamControls_FlyLookEnabled = m_FlyCamControls.FindAction("FlyLookEnabled", throwIfNotFound: true);
        }

        ~@PlayerControls()
        {
            UnityEngine.Debug.Assert(!m_CharacterControls.enabled, "This will cause a leak and performance issues, PlayerControls.CharacterControls.Disable() has not been called.");
            UnityEngine.Debug.Assert(!m_CameraControls.enabled, "This will cause a leak and performance issues, PlayerControls.CameraControls.Disable() has not been called.");
            UnityEngine.Debug.Assert(!m_UI.enabled, "This will cause a leak and performance issues, PlayerControls.UI.Disable() has not been called.");
            UnityEngine.Debug.Assert(!m_SystemControls.enabled, "This will cause a leak and performance issues, PlayerControls.SystemControls.Disable() has not been called.");
            UnityEngine.Debug.Assert(!m_DebugControls.enabled, "This will cause a leak and performance issues, PlayerControls.DebugControls.Disable() has not been called.");
            UnityEngine.Debug.Assert(!m_FlyCamControls.enabled, "This will cause a leak and performance issues, PlayerControls.FlyCamControls.Disable() has not been called.");
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Character Controls
        private readonly InputActionMap m_CharacterControls;
        private List<ICharacterControlsActions> m_CharacterControlsActionsCallbackInterfaces = new List<ICharacterControlsActions>();
        private readonly InputAction m_CharacterControls_Move;
        private readonly InputAction m_CharacterControls_Jump;
        private readonly InputAction m_CharacterControls_Crouch;
        private readonly InputAction m_CharacterControls_Sprint;
        private readonly InputAction m_CharacterControls_Roll;
        private readonly InputAction m_CharacterControls_Attack;
        private readonly InputAction m_CharacterControls_MoveGamepad;
        public struct CharacterControlsActions
        {
            private @PlayerControls m_Wrapper;
            public CharacterControlsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Move => m_Wrapper.m_CharacterControls_Move;
            public InputAction @Jump => m_Wrapper.m_CharacterControls_Jump;
            public InputAction @Crouch => m_Wrapper.m_CharacterControls_Crouch;
            public InputAction @Sprint => m_Wrapper.m_CharacterControls_Sprint;
            public InputAction @Roll => m_Wrapper.m_CharacterControls_Roll;
            public InputAction @Attack => m_Wrapper.m_CharacterControls_Attack;
            public InputAction @MoveGamepad => m_Wrapper.m_CharacterControls_MoveGamepad;
            public InputActionMap Get() { return m_Wrapper.m_CharacterControls; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(CharacterControlsActions set) { return set.Get(); }
            public void AddCallbacks(ICharacterControlsActions instance)
            {
                if (instance == null || m_Wrapper.m_CharacterControlsActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_CharacterControlsActionsCallbackInterfaces.Add(instance);
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Crouch.started += instance.OnCrouch;
                @Crouch.performed += instance.OnCrouch;
                @Crouch.canceled += instance.OnCrouch;
                @Sprint.started += instance.OnSprint;
                @Sprint.performed += instance.OnSprint;
                @Sprint.canceled += instance.OnSprint;
                @Roll.started += instance.OnRoll;
                @Roll.performed += instance.OnRoll;
                @Roll.canceled += instance.OnRoll;
                @Attack.started += instance.OnAttack;
                @Attack.performed += instance.OnAttack;
                @Attack.canceled += instance.OnAttack;
                @MoveGamepad.started += instance.OnMoveGamepad;
                @MoveGamepad.performed += instance.OnMoveGamepad;
                @MoveGamepad.canceled += instance.OnMoveGamepad;
            }

            private void UnregisterCallbacks(ICharacterControlsActions instance)
            {
                @Move.started -= instance.OnMove;
                @Move.performed -= instance.OnMove;
                @Move.canceled -= instance.OnMove;
                @Jump.started -= instance.OnJump;
                @Jump.performed -= instance.OnJump;
                @Jump.canceled -= instance.OnJump;
                @Crouch.started -= instance.OnCrouch;
                @Crouch.performed -= instance.OnCrouch;
                @Crouch.canceled -= instance.OnCrouch;
                @Sprint.started -= instance.OnSprint;
                @Sprint.performed -= instance.OnSprint;
                @Sprint.canceled -= instance.OnSprint;
                @Roll.started -= instance.OnRoll;
                @Roll.performed -= instance.OnRoll;
                @Roll.canceled -= instance.OnRoll;
                @Attack.started -= instance.OnAttack;
                @Attack.performed -= instance.OnAttack;
                @Attack.canceled -= instance.OnAttack;
                @MoveGamepad.started -= instance.OnMoveGamepad;
                @MoveGamepad.performed -= instance.OnMoveGamepad;
                @MoveGamepad.canceled -= instance.OnMoveGamepad;
            }

            public void RemoveCallbacks(ICharacterControlsActions instance)
            {
                if (m_Wrapper.m_CharacterControlsActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ICharacterControlsActions instance)
            {
                foreach (var item in m_Wrapper.m_CharacterControlsActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_CharacterControlsActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public CharacterControlsActions @CharacterControls => new CharacterControlsActions(this);

        // Camera Controls
        private readonly InputActionMap m_CameraControls;
        private List<ICameraControlsActions> m_CameraControlsActionsCallbackInterfaces = new List<ICameraControlsActions>();
        private readonly InputAction m_CameraControls_Look;
        private readonly InputAction m_CameraControls_LookGamepad;
        private readonly InputAction m_CameraControls_Zoom;
        public struct CameraControlsActions
        {
            private @PlayerControls m_Wrapper;
            public CameraControlsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Look => m_Wrapper.m_CameraControls_Look;
            public InputAction @LookGamepad => m_Wrapper.m_CameraControls_LookGamepad;
            public InputAction @Zoom => m_Wrapper.m_CameraControls_Zoom;
            public InputActionMap Get() { return m_Wrapper.m_CameraControls; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(CameraControlsActions set) { return set.Get(); }
            public void AddCallbacks(ICameraControlsActions instance)
            {
                if (instance == null || m_Wrapper.m_CameraControlsActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_CameraControlsActionsCallbackInterfaces.Add(instance);
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @LookGamepad.started += instance.OnLookGamepad;
                @LookGamepad.performed += instance.OnLookGamepad;
                @LookGamepad.canceled += instance.OnLookGamepad;
                @Zoom.started += instance.OnZoom;
                @Zoom.performed += instance.OnZoom;
                @Zoom.canceled += instance.OnZoom;
            }

            private void UnregisterCallbacks(ICameraControlsActions instance)
            {
                @Look.started -= instance.OnLook;
                @Look.performed -= instance.OnLook;
                @Look.canceled -= instance.OnLook;
                @LookGamepad.started -= instance.OnLookGamepad;
                @LookGamepad.performed -= instance.OnLookGamepad;
                @LookGamepad.canceled -= instance.OnLookGamepad;
                @Zoom.started -= instance.OnZoom;
                @Zoom.performed -= instance.OnZoom;
                @Zoom.canceled -= instance.OnZoom;
            }

            public void RemoveCallbacks(ICameraControlsActions instance)
            {
                if (m_Wrapper.m_CameraControlsActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ICameraControlsActions instance)
            {
                foreach (var item in m_Wrapper.m_CameraControlsActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_CameraControlsActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public CameraControlsActions @CameraControls => new CameraControlsActions(this);

        // UI
        private readonly InputActionMap m_UI;
        private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
        private readonly InputAction m_UI_Navigate;
        private readonly InputAction m_UI_Submit;
        private readonly InputAction m_UI_Cancel;
        private readonly InputAction m_UI_Point;
        private readonly InputAction m_UI_Click;
        private readonly InputAction m_UI_ScrollWheel;
        private readonly InputAction m_UI_MiddleClick;
        private readonly InputAction m_UI_RightClick;
        private readonly InputAction m_UI_TrackedDevicePosition;
        private readonly InputAction m_UI_TrackedDeviceOrientation;
        public struct UIActions
        {
            private @PlayerControls m_Wrapper;
            public UIActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Navigate => m_Wrapper.m_UI_Navigate;
            public InputAction @Submit => m_Wrapper.m_UI_Submit;
            public InputAction @Cancel => m_Wrapper.m_UI_Cancel;
            public InputAction @Point => m_Wrapper.m_UI_Point;
            public InputAction @Click => m_Wrapper.m_UI_Click;
            public InputAction @ScrollWheel => m_Wrapper.m_UI_ScrollWheel;
            public InputAction @MiddleClick => m_Wrapper.m_UI_MiddleClick;
            public InputAction @RightClick => m_Wrapper.m_UI_RightClick;
            public InputAction @TrackedDevicePosition => m_Wrapper.m_UI_TrackedDevicePosition;
            public InputAction @TrackedDeviceOrientation => m_Wrapper.m_UI_TrackedDeviceOrientation;
            public InputActionMap Get() { return m_Wrapper.m_UI; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
            public void AddCallbacks(IUIActions instance)
            {
                if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
                @Navigate.started += instance.OnNavigate;
                @Navigate.performed += instance.OnNavigate;
                @Navigate.canceled += instance.OnNavigate;
                @Submit.started += instance.OnSubmit;
                @Submit.performed += instance.OnSubmit;
                @Submit.canceled += instance.OnSubmit;
                @Cancel.started += instance.OnCancel;
                @Cancel.performed += instance.OnCancel;
                @Cancel.canceled += instance.OnCancel;
                @Point.started += instance.OnPoint;
                @Point.performed += instance.OnPoint;
                @Point.canceled += instance.OnPoint;
                @Click.started += instance.OnClick;
                @Click.performed += instance.OnClick;
                @Click.canceled += instance.OnClick;
                @ScrollWheel.started += instance.OnScrollWheel;
                @ScrollWheel.performed += instance.OnScrollWheel;
                @ScrollWheel.canceled += instance.OnScrollWheel;
                @MiddleClick.started += instance.OnMiddleClick;
                @MiddleClick.performed += instance.OnMiddleClick;
                @MiddleClick.canceled += instance.OnMiddleClick;
                @RightClick.started += instance.OnRightClick;
                @RightClick.performed += instance.OnRightClick;
                @RightClick.canceled += instance.OnRightClick;
                @TrackedDevicePosition.started += instance.OnTrackedDevicePosition;
                @TrackedDevicePosition.performed += instance.OnTrackedDevicePosition;
                @TrackedDevicePosition.canceled += instance.OnTrackedDevicePosition;
                @TrackedDeviceOrientation.started += instance.OnTrackedDeviceOrientation;
                @TrackedDeviceOrientation.performed += instance.OnTrackedDeviceOrientation;
                @TrackedDeviceOrientation.canceled += instance.OnTrackedDeviceOrientation;
            }

            private void UnregisterCallbacks(IUIActions instance)
            {
                @Navigate.started -= instance.OnNavigate;
                @Navigate.performed -= instance.OnNavigate;
                @Navigate.canceled -= instance.OnNavigate;
                @Submit.started -= instance.OnSubmit;
                @Submit.performed -= instance.OnSubmit;
                @Submit.canceled -= instance.OnSubmit;
                @Cancel.started -= instance.OnCancel;
                @Cancel.performed -= instance.OnCancel;
                @Cancel.canceled -= instance.OnCancel;
                @Point.started -= instance.OnPoint;
                @Point.performed -= instance.OnPoint;
                @Point.canceled -= instance.OnPoint;
                @Click.started -= instance.OnClick;
                @Click.performed -= instance.OnClick;
                @Click.canceled -= instance.OnClick;
                @ScrollWheel.started -= instance.OnScrollWheel;
                @ScrollWheel.performed -= instance.OnScrollWheel;
                @ScrollWheel.canceled -= instance.OnScrollWheel;
                @MiddleClick.started -= instance.OnMiddleClick;
                @MiddleClick.performed -= instance.OnMiddleClick;
                @MiddleClick.canceled -= instance.OnMiddleClick;
                @RightClick.started -= instance.OnRightClick;
                @RightClick.performed -= instance.OnRightClick;
                @RightClick.canceled -= instance.OnRightClick;
                @TrackedDevicePosition.started -= instance.OnTrackedDevicePosition;
                @TrackedDevicePosition.performed -= instance.OnTrackedDevicePosition;
                @TrackedDevicePosition.canceled -= instance.OnTrackedDevicePosition;
                @TrackedDeviceOrientation.started -= instance.OnTrackedDeviceOrientation;
                @TrackedDeviceOrientation.performed -= instance.OnTrackedDeviceOrientation;
                @TrackedDeviceOrientation.canceled -= instance.OnTrackedDeviceOrientation;
            }

            public void RemoveCallbacks(IUIActions instance)
            {
                if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IUIActions instance)
            {
                foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public UIActions @UI => new UIActions(this);

        // System Controls
        private readonly InputActionMap m_SystemControls;
        private List<ISystemControlsActions> m_SystemControlsActionsCallbackInterfaces = new List<ISystemControlsActions>();
        private readonly InputAction m_SystemControls_Pause;
        public struct SystemControlsActions
        {
            private @PlayerControls m_Wrapper;
            public SystemControlsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Pause => m_Wrapper.m_SystemControls_Pause;
            public InputActionMap Get() { return m_Wrapper.m_SystemControls; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(SystemControlsActions set) { return set.Get(); }
            public void AddCallbacks(ISystemControlsActions instance)
            {
                if (instance == null || m_Wrapper.m_SystemControlsActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_SystemControlsActionsCallbackInterfaces.Add(instance);
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
            }

            private void UnregisterCallbacks(ISystemControlsActions instance)
            {
                @Pause.started -= instance.OnPause;
                @Pause.performed -= instance.OnPause;
                @Pause.canceled -= instance.OnPause;
            }

            public void RemoveCallbacks(ISystemControlsActions instance)
            {
                if (m_Wrapper.m_SystemControlsActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ISystemControlsActions instance)
            {
                foreach (var item in m_Wrapper.m_SystemControlsActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_SystemControlsActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public SystemControlsActions @SystemControls => new SystemControlsActions(this);

        // Debug Controls
        private readonly InputActionMap m_DebugControls;
        private List<IDebugControlsActions> m_DebugControlsActionsCallbackInterfaces = new List<IDebugControlsActions>();
        private readonly InputAction m_DebugControls_ToggleGPUI;
        public struct DebugControlsActions
        {
            private @PlayerControls m_Wrapper;
            public DebugControlsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @ToggleGPUI => m_Wrapper.m_DebugControls_ToggleGPUI;
            public InputActionMap Get() { return m_Wrapper.m_DebugControls; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(DebugControlsActions set) { return set.Get(); }
            public void AddCallbacks(IDebugControlsActions instance)
            {
                if (instance == null || m_Wrapper.m_DebugControlsActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_DebugControlsActionsCallbackInterfaces.Add(instance);
                @ToggleGPUI.started += instance.OnToggleGPUI;
                @ToggleGPUI.performed += instance.OnToggleGPUI;
                @ToggleGPUI.canceled += instance.OnToggleGPUI;
            }

            private void UnregisterCallbacks(IDebugControlsActions instance)
            {
                @ToggleGPUI.started -= instance.OnToggleGPUI;
                @ToggleGPUI.performed -= instance.OnToggleGPUI;
                @ToggleGPUI.canceled -= instance.OnToggleGPUI;
            }

            public void RemoveCallbacks(IDebugControlsActions instance)
            {
                if (m_Wrapper.m_DebugControlsActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IDebugControlsActions instance)
            {
                foreach (var item in m_Wrapper.m_DebugControlsActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_DebugControlsActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public DebugControlsActions @DebugControls => new DebugControlsActions(this);

        // Fly Cam Controls
        private readonly InputActionMap m_FlyCamControls;
        private List<IFlyCamControlsActions> m_FlyCamControlsActionsCallbackInterfaces = new List<IFlyCamControlsActions>();
        private readonly InputAction m_FlyCamControls_FlyForward;
        private readonly InputAction m_FlyCamControls_FlyBackward;
        private readonly InputAction m_FlyCamControls_FlyLeft;
        private readonly InputAction m_FlyCamControls_FlyRight;
        private readonly InputAction m_FlyCamControls_FlyUp;
        private readonly InputAction m_FlyCamControls_FlyDown;
        private readonly InputAction m_FlyCamControls_FlyToggleFocus;
        private readonly InputAction m_FlyCamControls_FlySpeedUp;
        private readonly InputAction m_FlyCamControls_FlyLook;
        private readonly InputAction m_FlyCamControls_FlyLookEnabled;
        public struct FlyCamControlsActions
        {
            private @PlayerControls m_Wrapper;
            public FlyCamControlsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @FlyForward => m_Wrapper.m_FlyCamControls_FlyForward;
            public InputAction @FlyBackward => m_Wrapper.m_FlyCamControls_FlyBackward;
            public InputAction @FlyLeft => m_Wrapper.m_FlyCamControls_FlyLeft;
            public InputAction @FlyRight => m_Wrapper.m_FlyCamControls_FlyRight;
            public InputAction @FlyUp => m_Wrapper.m_FlyCamControls_FlyUp;
            public InputAction @FlyDown => m_Wrapper.m_FlyCamControls_FlyDown;
            public InputAction @FlyToggleFocus => m_Wrapper.m_FlyCamControls_FlyToggleFocus;
            public InputAction @FlySpeedUp => m_Wrapper.m_FlyCamControls_FlySpeedUp;
            public InputAction @FlyLook => m_Wrapper.m_FlyCamControls_FlyLook;
            public InputAction @FlyLookEnabled => m_Wrapper.m_FlyCamControls_FlyLookEnabled;
            public InputActionMap Get() { return m_Wrapper.m_FlyCamControls; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(FlyCamControlsActions set) { return set.Get(); }
            public void AddCallbacks(IFlyCamControlsActions instance)
            {
                if (instance == null || m_Wrapper.m_FlyCamControlsActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_FlyCamControlsActionsCallbackInterfaces.Add(instance);
                @FlyForward.started += instance.OnFlyForward;
                @FlyForward.performed += instance.OnFlyForward;
                @FlyForward.canceled += instance.OnFlyForward;
                @FlyBackward.started += instance.OnFlyBackward;
                @FlyBackward.performed += instance.OnFlyBackward;
                @FlyBackward.canceled += instance.OnFlyBackward;
                @FlyLeft.started += instance.OnFlyLeft;
                @FlyLeft.performed += instance.OnFlyLeft;
                @FlyLeft.canceled += instance.OnFlyLeft;
                @FlyRight.started += instance.OnFlyRight;
                @FlyRight.performed += instance.OnFlyRight;
                @FlyRight.canceled += instance.OnFlyRight;
                @FlyUp.started += instance.OnFlyUp;
                @FlyUp.performed += instance.OnFlyUp;
                @FlyUp.canceled += instance.OnFlyUp;
                @FlyDown.started += instance.OnFlyDown;
                @FlyDown.performed += instance.OnFlyDown;
                @FlyDown.canceled += instance.OnFlyDown;
                @FlyToggleFocus.started += instance.OnFlyToggleFocus;
                @FlyToggleFocus.performed += instance.OnFlyToggleFocus;
                @FlyToggleFocus.canceled += instance.OnFlyToggleFocus;
                @FlySpeedUp.started += instance.OnFlySpeedUp;
                @FlySpeedUp.performed += instance.OnFlySpeedUp;
                @FlySpeedUp.canceled += instance.OnFlySpeedUp;
                @FlyLook.started += instance.OnFlyLook;
                @FlyLook.performed += instance.OnFlyLook;
                @FlyLook.canceled += instance.OnFlyLook;
                @FlyLookEnabled.started += instance.OnFlyLookEnabled;
                @FlyLookEnabled.performed += instance.OnFlyLookEnabled;
                @FlyLookEnabled.canceled += instance.OnFlyLookEnabled;
            }

            private void UnregisterCallbacks(IFlyCamControlsActions instance)
            {
                @FlyForward.started -= instance.OnFlyForward;
                @FlyForward.performed -= instance.OnFlyForward;
                @FlyForward.canceled -= instance.OnFlyForward;
                @FlyBackward.started -= instance.OnFlyBackward;
                @FlyBackward.performed -= instance.OnFlyBackward;
                @FlyBackward.canceled -= instance.OnFlyBackward;
                @FlyLeft.started -= instance.OnFlyLeft;
                @FlyLeft.performed -= instance.OnFlyLeft;
                @FlyLeft.canceled -= instance.OnFlyLeft;
                @FlyRight.started -= instance.OnFlyRight;
                @FlyRight.performed -= instance.OnFlyRight;
                @FlyRight.canceled -= instance.OnFlyRight;
                @FlyUp.started -= instance.OnFlyUp;
                @FlyUp.performed -= instance.OnFlyUp;
                @FlyUp.canceled -= instance.OnFlyUp;
                @FlyDown.started -= instance.OnFlyDown;
                @FlyDown.performed -= instance.OnFlyDown;
                @FlyDown.canceled -= instance.OnFlyDown;
                @FlyToggleFocus.started -= instance.OnFlyToggleFocus;
                @FlyToggleFocus.performed -= instance.OnFlyToggleFocus;
                @FlyToggleFocus.canceled -= instance.OnFlyToggleFocus;
                @FlySpeedUp.started -= instance.OnFlySpeedUp;
                @FlySpeedUp.performed -= instance.OnFlySpeedUp;
                @FlySpeedUp.canceled -= instance.OnFlySpeedUp;
                @FlyLook.started -= instance.OnFlyLook;
                @FlyLook.performed -= instance.OnFlyLook;
                @FlyLook.canceled -= instance.OnFlyLook;
                @FlyLookEnabled.started -= instance.OnFlyLookEnabled;
                @FlyLookEnabled.performed -= instance.OnFlyLookEnabled;
                @FlyLookEnabled.canceled -= instance.OnFlyLookEnabled;
            }

            public void RemoveCallbacks(IFlyCamControlsActions instance)
            {
                if (m_Wrapper.m_FlyCamControlsActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IFlyCamControlsActions instance)
            {
                foreach (var item in m_Wrapper.m_FlyCamControlsActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_FlyCamControlsActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public FlyCamControlsActions @FlyCamControls => new FlyCamControlsActions(this);
        private int m_KeyboardandMouseSchemeIndex = -1;
        public InputControlScheme KeyboardandMouseScheme
        {
            get
            {
                if (m_KeyboardandMouseSchemeIndex == -1) m_KeyboardandMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard and Mouse");
                return asset.controlSchemes[m_KeyboardandMouseSchemeIndex];
            }
        }
        private int m_GamepadSchemeIndex = -1;
        public InputControlScheme GamepadScheme
        {
            get
            {
                if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
                return asset.controlSchemes[m_GamepadSchemeIndex];
            }
        }
        public interface ICharacterControlsActions
        {
            void OnMove(InputAction.CallbackContext context);
            void OnJump(InputAction.CallbackContext context);
            void OnCrouch(InputAction.CallbackContext context);
            void OnSprint(InputAction.CallbackContext context);
            void OnRoll(InputAction.CallbackContext context);
            void OnAttack(InputAction.CallbackContext context);
            void OnMoveGamepad(InputAction.CallbackContext context);
        }
        public interface ICameraControlsActions
        {
            void OnLook(InputAction.CallbackContext context);
            void OnLookGamepad(InputAction.CallbackContext context);
            void OnZoom(InputAction.CallbackContext context);
        }
        public interface IUIActions
        {
            void OnNavigate(InputAction.CallbackContext context);
            void OnSubmit(InputAction.CallbackContext context);
            void OnCancel(InputAction.CallbackContext context);
            void OnPoint(InputAction.CallbackContext context);
            void OnClick(InputAction.CallbackContext context);
            void OnScrollWheel(InputAction.CallbackContext context);
            void OnMiddleClick(InputAction.CallbackContext context);
            void OnRightClick(InputAction.CallbackContext context);
            void OnTrackedDevicePosition(InputAction.CallbackContext context);
            void OnTrackedDeviceOrientation(InputAction.CallbackContext context);
        }
        public interface ISystemControlsActions
        {
            void OnPause(InputAction.CallbackContext context);
        }
        public interface IDebugControlsActions
        {
            void OnToggleGPUI(InputAction.CallbackContext context);
        }
        public interface IFlyCamControlsActions
        {
            void OnFlyForward(InputAction.CallbackContext context);
            void OnFlyBackward(InputAction.CallbackContext context);
            void OnFlyLeft(InputAction.CallbackContext context);
            void OnFlyRight(InputAction.CallbackContext context);
            void OnFlyUp(InputAction.CallbackContext context);
            void OnFlyDown(InputAction.CallbackContext context);
            void OnFlyToggleFocus(InputAction.CallbackContext context);
            void OnFlySpeedUp(InputAction.CallbackContext context);
            void OnFlyLook(InputAction.CallbackContext context);
            void OnFlyLookEnabled(InputAction.CallbackContext context);
        }
    }
}
